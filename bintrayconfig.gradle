// The com.novoda:bintray-release plugin no longer work with new Android Gradle Plugin (AGP)
// The replacement uses AGP + com.jfrog.bintray.gradle:gradle-bintray-plugin
// Starting from the post at
// https://proandroiddev.com/how-i-published-distributed-my-livedatacalladapter-android-library-3cd258eb7aa6
// I modified the code from https://github.com/sky-uk/gradle-maven-plugin

if (!project.rootProject.file('local.properties').exists()) {
    println "Not applying bintrayconfig.gradle"
    return
}
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

def getBintrayUserAndKey() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return [
            properties.getProperty("bintray.user"),
            properties.getProperty("bintray.apikey")
    ]
}

if (publishPackage == null || publishPackage.version == null) {
    throw new IllegalStateException("Unable to reference publishPackage.version")
}

task checkBintrayConfig {
    doLast {
        def (user, key) = getBintrayUserAndKey()
        if (user == null || user.isEmpty() ||
                key == null || key.isEmpty()) {
            throw new IllegalStateException("Must specify Bintray user/API key in your local.properties.")
        }
    }
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html', '**/*.kt'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

afterEvaluate {
    bintrayUpload.dependsOn checkBintrayConfig

    publishing {
        publications {
            aar(MavenPublication) {
                groupId publishPackage.groupId
                artifactId publishPackage.artifactId
                version publishPackage.version

                artifact bundleReleaseAar
                artifact androidJavadocsJar
                artifact androidSourcesJar

                pom.withXml {
                    // adds dependencies
                    def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')

                    // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                    configurations.implementation.allDependencies.each {
                        // Ensure dependencies such as fileTree are not included.
                        if (it.name != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }
}

def (bintrayUser, bintrayKey) = getBintrayUserAndKey()

bintray {
    user = bintrayUser
    key = bintrayKey
    dryRun = false
    publications = ['aar']
    publish = true
    override = true
    pkg {
        repo = publishPackage.bintrayRepoName
        name = publishPackage.artifactId
        userOrg = bintrayUser
        licenses = ['Apache-2.0']
        websiteUrl = publishPackage.website
        vcsUrl = publishPackage.vcsUrl
        version {
            name = publishPackage.version
            desc = publishPackage.desc
        }
    }
}
